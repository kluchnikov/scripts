#!/bin/sh
### BEGIN INIT INFO
# Provides:          sipauthserve
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop sipauthserve
### END INIT INFO

set -e

SCRIPTNAME="${0##*/}"
SCRIPTNAME="${SCRIPTNAME##[KS][0-9][0-9]}"

ENV="env -i LANG=C PATH=/usr/local/bin:/usr/bin:/bin"

OBCACHECLEAN_RUN=auto
OBCACHECLEAN_MODE=daemon
OPENBTS_ENVVARS=/etc/OpenBTS/OpenBTS.conf


SIPAUTHSERVE_PATH=$(. $OPENBTS_ENVVARS && echo $SIPAUTHSERVE_PATH)
if [ -z "$SIPAUTHSERVE_PATH" ] ; then
	echo sipauthserve is not configured, edit /etc/OpenBTS/OpenBTS.conf
	return 1
fi

CORE_GEN=$(. $OPENBTS_ENVVARS && echo $CORE_GEN)
if [ -z "$CORE_GEN" ]; then
	CORE_GEN=0
fi

if [ "$CORE_GEN" -eq "1" ]; then
    #Turn on core generation
    #echo "Core geration is on"
    ulimit -c unlimited
fi

. /lib/lsb/init-functions

test -f /etc/default/rcS && . /etc/default/rcS


PIDFILE=$(. $OPENBTS_ENVVARS && echo $SIPAUTHSERVE_PID_FILE)
if [ -z "$PIDFILE" ] ; then
	#echo ERROR: SIPAUTHSERVE_PID_FILE needs to be defined in $OPENBTS_ENVVARS >&2
	#exit 2
	PIDFILE="/var/run/sipauthserve.pid"
fi

#Autorestart feature
AUTO_RESTART=$(. $OPENBTS_ENVVARS && echo $AUTO_RESTART)
if [ -z "$AUTO_RESTART" ] ; then
    AUTO_RESTART="0"
fi

SIPAUTHSERVE_MONITOR=$(. $OPENBTS_ENVVARS && echo $SIPAUTHSERVE_MONITOR)
if [ -z "$SIPAUTHSERVE_MONITOR" ] ; then
    SIPAUTHSERVE_MONITOR=$SIPAUTHSERVE_PATH/../scripts/sipauthservemon.sh
fi


PRE_COMMAND=$(. $OPENBTS_ENVVARS && echo $PRE_COMMAND)
AFTER_COMMAND=$(. $OPENBTS_ENVVARS && echo $AFTER_COMMAND)

pidof_sipauthserve() {
	# if there is actually an openbts process whose pid is in PIDFILE,
	# print it and return 0.
	if [ -e "$PIDFILE" ]; then
		if pidof sipauthserve | tr ' ' '\n' | grep -w $(cat $PIDFILE); then
			return 0
		fi
	fi
	return 1
}

sipauthserve_stop() {
		# if we are here something is broken and we need to try
		# to exit as nice and clean as possible
		PID=$(pidof_sipauthserve) || true

		if [ "${PID}" ]; then
			# in this case it is everything nice and dandy and we kill openbts
			echo
			#log_warning_msg "The OpenBTS configtest failed, so we are trying to kill it manually. This is almost certainly suboptimal, so please make sure your system is working as you'd expect now!"
                        kill $PID
		elif [ "$(pidof sipauthserve)" ]; then
			if [ "$VERBOSE" != no ]; then
                                echo " ... failed!"
			        echo "You may still have some OpenBTS processes running.  There are"
 			        echo "processes named 'OpenBTS' which do not match your pid file,"
			        echo "and in the name of safety, we've left them alone.  Please review"
			        echo "the situation by hand."
                        fi
                        return 1
		fi
}

sipauthserve_wait_stop() {
	#killall $OPENBTS_MONITOR >/dev/null 2>&1 || true
	ps auxw | grep $SIPAUTHSERVE_MONITOR | awk '{ print $2 }' | xargs kill  >/dev/null 2>&1 || true

	# running ?
	PIDTMP=$(pidof_sipauthserve) || true
	if kill -0 "${PIDTMP:-}" 2> /dev/null; then
	    PID=$PIDTMP
	fi

	sipauthserve_stop

	# wait until really stopped
	if [ -n "${PID:-}" ]; then
		i=0
		while kill -0 "${PID:-}" 2> /dev/null;  do
        		if [ $i = '60' ]; then
        			break;
        	 	else
        			if [ $i = '0' ]; then
                			echo -n " ... waiting "
        			else
                	      		echo -n "."
        		 	fi
        			i=$(($i+1))
        			sleep 1
        	      fi
		 done
	fi
	#Plain dirty hack !
	#killall transceiver >/dev/null 2>&1 || true
	#Kill monitor

}


sipauthserve_run_monitor() {
    log_daemon_msg "Run monitoring" "$SIPAUTHSERVE_MONITOR"
    nohup $SIPAUTHSERVE_MONITOR >> /var/log/sipauthservemon.run 2>&1 &
    log_end_msg 0
}

sipauthserve_do_start() {
		PID=$(pidof_sipauthserve) || true
		if [ -n "$PID" ]; then
			echo "sipauthserve is running (pid $PID)."
			exit 0
		fi
		
		$PRE_COMMAND

		log_daemon_msg "Starting sipauthserve server" "$SIPAUTHSERVE_PATH"
		RET=$PWD
		cd $SIPAUTHSERVE_PATH
		nohup ./sipauthserve >> /var/log/sipauthserve.run 2>&1 &
		PID=$!
		echo $PID > $PIDFILE
		
		if [ "$CORE_GEN" -eq "1" ]; then
		    # Dump everything, see man core
		    echo "127" > /proc/$PID/coredump_filter
		fi
		#wait some time
		log_end_msg 0
		if [ "$AUTO_RESTART" -ne "0" ]; then sipauthserve_run_monitor; fi
		# This sould be the last instruction
		cd $RET
		
		$AFTER_COMMAND

    return 0
}

sipauthserve_do_stop() {
		log_daemon_msg "Stopping sipauthserve server" "$SIPAUTHSERVE_PATH"
		if sipauthserve_wait_stop; then
                        log_end_msg 0
                else
                        log_end_msg 1
                fi
    return 0
}


case $1 in
	restart)
	    sipauthserve_do_stop
	    sipauthserve_do_start
	;;
	start)
	    sipauthserve_do_start
	;;
	stop)
	    sipauthserve_do_stop
	;;
	status)
		PID=$(pidof_sipauthserve) || true
		if [ -n "$PID" ]; then
			echo "sipauthserve is running (pid $PID)."
			exit 0
		else
			echo "sipauthserve is NOT running."
			if [ -e "$PIDFILE" ]; then
				exit 1
			else
				exit 3
			fi
		fi

		if [ "$CORE_GEN" -eq "1" ]; then
		    #Turn on core generation
		    echo "Core geration is on"
		    ulimit -c unlimited
		fi



	;;
	*)
		log_success_msg "Usage: /etc/init.d/sipauthserve {start|restart|stop|status}"
		exit 1
	;;
esac
