#!/bin/sh
### BEGIN INIT INFO
# Provides:          openbts
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop openbts
### END INIT INFO

set -e

SCRIPTNAME="${0##*/}"
SCRIPTNAME="${SCRIPTNAME##[KS][0-9][0-9]}"

ENV="env -i LANG=C PATH=/usr/local/bin:/usr/bin:/bin"

OBCACHECLEAN_RUN=auto
OBCACHECLEAN_MODE=daemon
OPENBTS_ENVVARS=/etc/OpenBTS/OpenBTS.conf

OPENBTS_PATH=$(. $OPENBTS_ENVVARS && echo $OPENBTS_PATH)
if [ -z "$OPENBTS_PATH" ] ; then
	echo OpenBTS is not configured, edit /etc/OpenBTS/OpenBTS.conf
	return 1
fi

CORE_GEN=$(. $OPENBTS_ENVVARS && echo $CORE_GEN)
if [ -z "$CORE_GEN" ]; then
	CORE_GEN=0
fi


if [ "$CORE_GEN" -eq "1" ]; then
    #Turn on core generation
    #echo "Core geration is on"
    ulimit -c unlimited
fi

. /lib/lsb/init-functions

test -f /etc/default/rcS && . /etc/default/rcS


PIDFILE=$(. $OPENBTS_ENVVARS && echo $OPENBTS_PID_FILE)
if [ -z "$PIDFILE" ] ; then
	#echo ERROR: OPENBTS_PID_FILE needs to be defined in $OPENBTS_ENVVARS >&2
	#exit 2
	PIDFILE="/var/run/OpenBTS.pid"
fi

# Socket fd
SOCKET_FILE=$(. $OPENBTS_ENVVARS && echo $SOCKET_FILE)
if [ -z "$SOCKET_FILE" ] ; then
    SOCKET_FILE="/var/run/command"
fi

#Autorestart feature
AUTO_RESTART=$(. $OPENBTS_ENVVARS && echo $AUTO_RESTART)
if [ -z "$AUTO_RESTART" ] ; then
    AUTO_RESTART="0"
fi

OPENBTS_MONITOR=$(. $OPENBTS_ENVVARS && echo $OPENBTS_MONITOR)
if [ -z "$OPENBTS_MONITOR" ] ; then
    OPENBTS_MONITOR=$OPENBTS_PATH/../scripts/openbtsmon.sh
fi


PRE_COMMAND=$(. $OPENBTS_ENVVARS && echo $PRE_COMMAND)
AFTER_COMMAND=$(. $OPENBTS_ENVVARS && echo $AFTER_COMMAND)

pidof_openbts() {
	# if there is actually an openbts process whose pid is in PIDFILE,
	# print it and return 0.
	if [ -e "$PIDFILE" ]; then
		if pidof OpenBTS | tr ' ' '\n' | grep -w $(cat $PIDFILE); then
			return 0
		fi
	fi
	return 1
}

openbts_stop() {
		# if we are here something is broken and we need to try
		# to exit as nice and clean as possible
		PID=$(pidof_openbts) || true

		if [ "${PID}" ]; then
			# in this case it is everything nice and dandy and we kill openbts
			echo
			#log_warning_msg "The OpenBTS configtest failed, so we are trying to kill it manually. This is almost certainly suboptimal, so please make sure your system is working as you'd expect now!"
                        kill $PID
		elif [ "$(pidof OpenBTS)" ]; then
			if [ "$VERBOSE" != no ]; then
                                echo " ... failed!"
			        echo "You may still have some OpenBTS processes running.  There are"
 			        echo "processes named 'OpenBTS' which do not match your pid file,"
			        echo "and in the name of safety, we've left them alone.  Please review"
			        echo "the situation by hand."
                        fi
                        return 1
		fi
}

openbts_wait_stop() {
	#killall $OPENBTS_MONITOR >/dev/null 2>&1 || true
	ps auxw | grep $OPENBTS_MONITOR | awk '{ print $2 }' | xargs kill  >/dev/null 2>&1 || true

	# running ?
	PIDTMP=$(pidof_openbts) || true
	if kill -0 "${PIDTMP:-}" 2> /dev/null; then
	    PID=$PIDTMP
	fi

	openbts_stop

	# wait until really stopped
	if [ -n "${PID:-}" ]; then
		i=0
		while kill -0 "${PID:-}" 2> /dev/null;  do
        		if [ $i = '60' ]; then
        			break;
        	 	else
        			if [ $i = '0' ]; then
                			echo -n " ... waiting "
        			else
                	      		echo -n "."
        		 	fi
        			i=$(($i+1))
        			sleep 1
        	      fi
		 done
	fi
	#Plain dirty hack !
	killall transceiver >/dev/null 2>&1 || true
	#Kill monitor

}


openbts_run_monitor() {
    log_daemon_msg "Run monitoring" "$OPENBTS_MONITOR"
    nohup $OPENBTS_MONITOR >> /var/log/openbtsmon.run 2>&1 &
    log_end_msg 0
}

openbts_do_start() {
		PID=$(pidof_openbts) || true
		if [ -n "$PID" ]; then
			echo "OpenBTS is running (pid $PID)."
			exit 0
		fi
		
		START_OB=0 #Assume it succeed
		$PRE_COMMAND || START_OB=1
		
		# We check  pre command return value, if auto restart option
		# activated. 
		if [ "$AUTO_RESTART" -eq "0" ]; then
		    if [ "$START_OB" -eq "1" ]; then
			log_end_msg 1
			exit 1
		    fi
		fi

		log_daemon_msg "Starting OpenBTS server" "$OPENBTS_PATH"
		RET=$PWD
		cd $OPENBTS_PATH/apps
		if [ "$START_OB" -eq "0" ]; then
		    nohup ./OpenBTS >> /var/log/OpenBTS.run 2>&1 &
		    PID=$!
		    echo $PID > $PIDFILE
		
		    if [ "$CORE_GEN" -eq "1" ]; then
			# Dump everything, see man core
			echo "127" > /proc/$PID/coredump_filter
		    fi
		else
		    echo Initialized script failed, wait some time to restart later in background
		fi
		#wait some time
		log_end_msg 0
		if [ "$AUTO_RESTART" -ne "0" ]; then openbts_run_monitor; fi
		# This sould be the last instruction
		cd $RET
		
		$AFTER_COMMAND

    return 0
}

openbts_do_stop() {
		log_daemon_msg "Stopping OpenBTS server" "$OPENBTS_PATH"
		if openbts_wait_stop; then
                        log_end_msg 0
                else
                        log_end_msg 1
                fi
    return 0
}


case $1 in
	restart)
	    openbts_do_stop
	    openbts_do_start
	;;
	start)
	    openbts_do_start
	;;
	stop)
	    openbts_do_stop
	;;
	status)
		PID=$(pidof_openbts) || true
		if [ -n "$PID" ]; then
			echo "OpenBTS is running (pid $PID)."
			exit 0
		else
			echo "OpenBTS is NOT running."
			if [ -e "$PIDFILE" ]; then
				exit 1
			else
				exit 3
			fi
		fi

		if [ "$CORE_GEN" -eq "1" ]; then
		    #Turn on core generation
		    echo "Core geration is on"
		    ulimit -c unlimited
		fi



	;;
	*)
		log_success_msg "Usage: /etc/init.d/OpenBTS {start|stop|status}"
		exit 1
	;;
esac
